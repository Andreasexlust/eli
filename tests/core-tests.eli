(check 3
  (do 1 2 3))

(check T
  (is 1 1 1))

(check F
  (is 1 1 2))

(check T
  (= 1 1 1))

(check F
  (= 1 1 2))

(let [foo [1 2 3:4]]
  (check T
    (is foo foo))
  (check F
    (is foo [1 2 3:4]))
  (check T
    (= foo [1 2 3:4])))
  
(check 6
  (+ 1 2 3))

(check 2
  (- 7 4 1))

(check 24
  (* 2 3 4))

(check 3
  (/ 18 2 3))

(check 1
  (if T 1))

(check 2
  (if T 1 2))

(check _
  (if F 1))

(check _
  (if F 1 2))

(check 2
  (if F 1 (else 2)))

(check _
  (if F 1 (else-if F 2 3)))

(check 4
  (if F 1 2 (else-if T 3 4)))

(check 123:4
  (parse-int " 123def"))

(check _:_
  (parse-int "abc123"))

(check 123:6
  (parse-int "abc123def" 3))

(check 1.234:5
  (parse-float "1.234"))

(check 1.0
  (- 2.0 1.0))

(check (- 1.0)
  (- 1.0 2.0))

(check 15.00
  (* 1.5 10.0))

(check 1.5
  (/ 15.0 10.0))

(check 2
  ([1 2 3] 1))

(check T
  (< [1 2 3] [1 3 4]))

(check "['foo \"bar\"]"
  (dump ['foo "bar"]))

(check 441
  (int/rebase 100 8))

(check 6
  (bit/size 63))

(check 7
  (bit/size 64))